# main work
source /testrepo/user_input
NAMESPACE=$(echo "$NAMESPACE" | xargs)
DOMAIN=$(echo "$DOMAIN" | xargs)
HELM_RELEASE=$(echo "$HELM_RELEASE" | xargs)
CONFIG_FILE=$(echo "$CONFIG_FILE" | xargs)
LOCAL_FILE=$(echo "$LOCAL_FILE" | xargs)

oc login --token=sha256~6mjACcmfAXXOkKh70UbirAf5xhmCxBI3plF9kzhDVgA --server=https://api.yt.cp.fyre.ibm.com:6443 --insecure-skip-tls-verify=true
# Step 3: Set project context
oc project $NAMESPACE 
if [[ $? -ne 0 ]]; then
  echo "Error: Failed to set project '$NAMESPACE'.Ensure it exists and you have access."
  exit 1
fi
echo "Set project to '$NAMESPACE'."
# Step 5: Conditionally create ConfigMap for config file
CONFIG_CM=""
if [ -n "$CONFIG_FILE" ]; then
    echo "DEBUG: Checking config file: $CONFIG_FILE"
    if [ -f "$CONFIG_FILE" ]; then
        # Derive ConfigMap name from filename (remove extension and path)
        config_base=$(basename "$CONFIG_FILE" | sed 's/\.[^.]*$//')
        CONFIG_CM="${config_base}"
        oc create configmap "$CONFIG_CM" --from-file="$CONFIG_FILE" -n "$NAMESPACE" --dry-run=client -o yaml | oc apply -f - -n "$NAMESPACE"
        echo "ConfigMap '$CONFIG_CM' created/applied for config file '$CONFIG_FILE'."
    else
        echo "DEBUG: Config file '$CONFIG_FILE' not found or inaccessible."
        echo "No valid config_file specified or file not found. Skipping config ConfigMap."
    fi
else
    echo "No config_file specified. Skipping config ConfigMap."
fi
# Step 6: Conditionally create ConfigMap for local file
sanitize_name() {
    local name="$1"
    echo "${name//./-}"
}

LOCAL_CMS=()
if [ -n "$LOCAL_FILE" ] && [ -f "$LOCAL_FILE" ]; then
    if [[ "$LOCAL_FILE" == *:* ]]; then
        local_path="${LOCAL_FILE%%:*}"
        rel_path="${LOCAL_FILE#*:}"
    else
        local_path="$LOCAL_FILE"
        filename=$(basename "$LOCAL_FILE")
        rel_path="$filename"
    fi
    filename=$(basename "$local_path")
    sanitized_filename=$(sanitize_name "$filename" | sed 's/\.[^.]*$//')
    tar_name="${sanitized_filename}.tar.gz"
    cm_name="${sanitized_filename}-${NAMESPACE}"

    temp_dir=$(mktemp -d)
    mkdir -p "${temp_dir}/local/$(dirname "$rel_path")"
    cp "$local_path" "${temp_dir}/local/$rel_path"
    tar -czvf "${temp_dir}/${tar_name}" -C "${temp_dir}/local" .
    tar -tzf "${temp_dir}/${tar_name}"
    oc create configmap "$cm_name" --from-file="${temp_dir}/${tar_name}" -n "$NAMESPACE" --dry-run=client -o yaml | oc apply -f - -n "$NAMESPACE"
    echo "ConfigMap '$cm_name' created/applied for local file '$local_path' at local:///$rel_path."
    LOCAL_CMS+=("$cm_name")
    rm -rf "$temp_dir"
else
    echo "No valid loacal_file specified or file not found. Skipping local ConfigMap."
fi   
# Step 7: Conditionally create TLS secret for certificate and key
TLS_SECRET=""
if [ -f "$CERT_FILE" ] && [ -f "$KEY_FILE" ]; then
    TLS_SECRET="$DOMAIN-cert-secret"
    oc create secret tls "$TLS_SECRET" --cert="$CERT_FILE" --key="$KEY_FILE" -n "$NAMESPACE" --dry-run=client -o yaml | oc apply -f - -n "$NAMESPACE"
    echo "TLS Secret '$TLS_SECRET' created/applied for cert '$CERT_FILE' and key '$KEY_FILE'."
else
    echo "DEBUG: Certificate file '$CERT_FILE' or key file '$KEY_FILE' not found or inaccessible."
    echo "No valid certificate or key file specified. Skipping TLS secret creation."
fi        
# Step 8: Generate values.yaml
cat > "$ENV"_values.yaml << EOL
datapowerService:
  name: $SERVICE
  namespace: $NAMESPACE
  domains:
    - name: $DOMAIN
      certs:
        - certType: usrcerts
          secret: $TLS_SECRET         
      dpApp:
        config:
$(if [ -n "$CONFIG_CM" ]; then echo "          - $CONFIG_CM"; fi)
        local:
$(if [ ${#LOCAL_CMS[@]} -gt 0 ]; then echo "          - ${LOCAL_CMS[0]}"; fi)
EOL
echo "Generated "$ENV"_values.yaml with DOMAIN='$DOMAIN' and ConfigMap(s) '$CONFIG_CM' and '${LOCAL_CMS[*]}'."
cat  "$ENV"_values.yaml
# Step 8: Deploy Helm chart with generated values.yaml
helm upgrade --install "$RELEASE_NAME" /testrepo/datapower -n "$NAMESPACE" -f "$ENV"_values.yaml

echo "Helm release "$RELEASE_NAME"  deployed/updated in namespace '$NAMESPACE' with "$ENV"_values.yaml."     
